/*
  
  -------------------------------------------------------------------------------------------
  Output temp & humidity to LCD screen
  MM
  -------------------------------------------------------------------------------------------
  
  LiquidCrystal Library 
  
  
  The circuit:
 * LCD RS pin to digital pin 12
 * LCD Enable pin to digital pin 11
 * LCD D4 pin to digital pin 5
 * LCD D5 pin to digital pin 4
 * LCD D6 pin to digital pin 3
 * LCD D7 pin to digital pin 2
 * LCD R/W pin to ground
 * 10K resistor:
 * ends to +5V and ground
 * wiper to LCD VO pin (pin 3)
 
 */

// include the library code:
#include <LiquidCrystal.h>
#include <dht11.h>

/*-----( Declare objects )-----*/
dht11 DHT11;

/*-----( Declare Constants, Pin Numbers )-----*/
#define DHT11PIN 7

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
int x;

void setup() {
  
  
  x==10000;
  
  // set up the LCD's number of columns and rows: 
  lcd.begin(16, 2);
  // Print a message to the LCD.
  lcd.print("Mark 1 LCD!");
  
//  Serial.begin(9600);
    lcd.println("DHT11 TEST PROGRAM ");
    delay (x);
    lcd.print("LIBRARY VERSION: ");
// set the cursor to column 0, line 1
    lcd.setCursor(0, 1);
    lcd.println(DHT11LIB_VERSION);
    lcd.println();
    delay (x);
    
}

void loop() {
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  
  int chk = DHT11.read(DHT11PIN);

  Serial.print("Read sensor: ");
  switch (chk)
  {
    case 0: lcd.println("OK"); break;
    case -1: lcd.println("Checksum error"); break;
    case -2: lcd.println("Time out error"); break;
    default: lcd.println("Unknown error"); break;
  }
  lcd.setCursor(0, 0);
  lcd.print("Humid (%): ");
  lcd.println((float)DHT11.humidity, 2);
  delay (x);

  lcd.setCursor(0, 1);
  lcd.print("Temp degC: ");
  lcd.println((float)DHT11.temperature, 2);
  delay (x);
/*
  lcd.print("Temperature (oF): ");
  lcd.println(Fahrenheit(DHT11.temperature), 2);
  delay (x);

  lcd.print("Temperature (K): ");
  lcd.println(Kelvin(DHT11.temperature), 2);
  delay (x);

  lcd.print("Dew Point (oC): ");
  lcd.println(dewPoint(DHT11.temperature, DHT11.humidity));
  delay (x);
  
  lcd.print("Dew PointFast (oC): ");
  lcd.println(dewPointFast(DHT11.temperature, DHT11.humidity));
  delay (x);
  */
  
  delay(2000);
}/* --(end main loop )-- */

/*-----( Declare User-written Functions )-----*/
//
//Celsius to Fahrenheit conversion
double Fahrenheit(double celsius)
{
	return 1.8 * celsius + 32;
}

//Celsius to Kelvin conversion
double Kelvin(double celsius)
{
	return celsius + 273.15;
}

// dewPoint function NOAA
// reference: http://wahiduddin.net/calc/density_algorithms.htm 
double dewPoint(double celsius, double humidity)
{
	double A0= 373.15/(273.15 + celsius);
	double SUM = -7.90298 * (A0-1);
	SUM += 5.02808 * log10(A0);
	SUM += -1.3816e-7 * (pow(10, (11.344*(1-1/A0)))-1) ;
	SUM += 8.1328e-3 * (pow(10,(-3.49149*(A0-1)))-1) ;
	SUM += log10(1013.246);
	double VP = pow(10, SUM-3) * humidity;
	double T = log(VP/0.61078);   // temp var
	return (241.88 * T) / (17.558-T);
}

// delta max = 0.6544 wrt dewPoint()
// 5x faster than dewPoint()
// reference: http://en.wikipedia.org/wiki/Dew_point
double dewPointFast(double celsius, double humidity)
{
	double a = 17.271;
	double b = 237.7;
	double temp = (a * celsius) / (b + celsius) + log(humidity/100);
	double Td = (b * temp) / (a - temp);
	return Td;
}
